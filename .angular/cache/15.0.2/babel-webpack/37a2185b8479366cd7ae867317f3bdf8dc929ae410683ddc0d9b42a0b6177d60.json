{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\nimport { r as raf, g as getElementRoot } from './helpers-3b390e48.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-029a46f6.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      const {\n        el,\n        isColumnVisible\n      } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = ev => {\n      if (!this.numericInput) {\n        return;\n      }\n      const {\n        useInputMode,\n        inputModeColumn\n      } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = state => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const {\n        el\n      } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          if (activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const {\n              scrollEndCallback\n            } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = entries => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      } else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, {\n      threshold: 0.001\n    }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', ev => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const {\n      activeItem,\n      items,\n      isColumnVisible,\n      value\n    } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      } else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  scrollActiveItemIntoView() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const activeEl = _this.activeItem;\n      if (activeEl) {\n        _this.centerPickerItemInView(activeEl, false);\n      }\n    })();\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  setValue(value) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        items\n      } = _this2;\n      _this2.value = value;\n      const findItem = items.find(item => item.value === value && item.disabled !== true);\n      if (findItem) {\n        _this2.ionChange.emit(findItem);\n      }\n    })();\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const {\n      items,\n      color,\n      isActive,\n      numericInput\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      tabindex: 0,\n      class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      })\n    }, h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), items.map((item, index) => {\n      return h(\"button\", {\n        tabindex: \"-1\",\n        class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false\n        },\n        \"data-value\": item.value,\n        \"data-index\": index,\n        onClick: ev => {\n          this.centerPickerItemInView(ev.target);\n        },\n        disabled: item.disabled\n      }, item.text);\n    }), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChange\"]\n    };\n  }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\nexport { PickerColumnInternal as ion_picker_column_internal };","map":{"version":3,"names":["r","registerInstance","e","createEvent","h","H","Host","i","getElement","b","getIonMode","raf","g","getElementRoot","a","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","c","createColorClasses","pickerColumnInternalIosCss","pickerColumnInternalMdCss","PickerColumnInternal","constructor","hostRef","ionChange","isScrolling","isColumnVisible","isActive","items","color","numericInput","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","inputModeChange","ev","useInputMode","inputModeColumn","detail","isColumnActive","setInputModeActive","state","scrollEndCallback","initializeScrollListener","timeout","activeEl","activeItem","scrollCallback","clearTimeout","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","activeElement","shadowRoot","elementFromPoint","classList","remove","PICKER_COL_ACTIVE","disabled","add","setTimeout","dataIndex","getAttribute","index","parseInt","selectedItem","value","setValue","addEventListener","destroyScrollListener","removeEventListener","valueChange","scrollActiveItemIntoView","componentWillLoad","visibleCallback","entries","_a","isIntersecting","oldActive","querySelector","IntersectionObserver","threshold","observe","parentEl","closest","componentDidRender","findItem","find","item","emit","render","mode","tabindex","class","map","onClick","text","watchers","style","ios","md","ion_picker_column_internal"],"sources":["C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\nimport { r as raf, g as getElementRoot } from './helpers-3b390e48.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-029a46f6.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      const { el, isColumnVisible } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined,\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = (state) => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          if (activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const { scrollEndCallback } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      }\n      else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const { activeItem, items, isColumnVisible, value } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      }\n      else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  async scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  async setValue(value) {\n    const { items } = this;\n    this.value = value;\n    const findItem = items.find((item) => item.value === value && item.disabled !== true);\n    if (findItem) {\n      this.ionChange.emit(findItem);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput,\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"button\", { tabindex: \"-1\", class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false,\n        }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target);\n        }, disabled: item.disabled }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}