{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-8e692445.js';\nimport { b as getIonMode, c as config } from './ionic-global-c95cf239.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-e78d1307.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers-3b390e48.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-eab49c64.js';\nimport { a as attachComponent } from './framework-delegate-073a0b65.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  init(container) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.state = VIEW_STATE_ATTACHED;\n      if (!_this.element) {\n        const component = _this.component;\n        _this.element = yield attachComponent(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);\n      }\n    })();\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  componentDidLoad() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.rootChanged();\n      _this2.gesture = (yield import('./swipe-back-e1ef2243.js')).createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));\n      _this2.swipeGestureChanged();\n    })();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : opts = {};\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: function () {\n            var _ref = _asyncToGenerator(function* () {\n              mark();\n              yield finish;\n            });\n            return function markVisible() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  getRouteId() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const active = _this3.getActiveSync();\n      if (active) {\n        return {\n          id: active.element.tagName,\n          params: active.params,\n          element: active.element\n        };\n      }\n      return undefined;\n    })();\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.getActiveSync();\n    })();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.views[index];\n    })();\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.canGoBackSync(view);\n    })();\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.getPreviousSync(view);\n    })();\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  queueTrns(ti, done) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n      if (_this8.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n        return false;\n      }\n      const promise = new Promise((resolve, reject) => {\n        ti.resolve = resolve;\n        ti.reject = reject;\n      });\n      ti.done = done;\n      /**\n       * If using router, check to see if navigation hooks\n       * will allow us to perform this transition. This\n       * is required in order for hooks to work with\n       * the ion-back-button or swipe to go back.\n       */\n      if (ti.opts && ti.opts.updateURL !== false && _this8.useRouter) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          const canTransition = yield router.canTransition();\n          if (canTransition === false) {\n            return false;\n          }\n          if (typeof canTransition === 'string') {\n            router.push(canTransition, ti.opts.direction || 'back');\n            return false;\n          }\n        }\n      }\n      // Normalize empty\n      if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n        ti.insertViews = undefined;\n      }\n      // Enqueue transition instruction\n      _this8.transInstr.push(ti);\n      // if there isn't a transition already happening\n      // then this will kick off this transition\n      _this8.nextTrns();\n      return promise;\n    })();\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  runTransition(ti) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // set that this nav is actively transitioning\n        _this9.ionNavWillChange.emit();\n        _this9.isTransitioning = true;\n        _this9.prepareTI(ti);\n        const leavingView = _this9.getActiveSync();\n        const enteringView = _this9.getEnteringView(ti, leavingView);\n        if (!leavingView && !enteringView) {\n          throw new Error('no views in the stack to be removed');\n        }\n        if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n          yield enteringView.init(_this9.el);\n        }\n        _this9.postViewInit(enteringView, leavingView, ti);\n        // Needs transition?\n        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n        if (requiresTransition && ti.opts && leavingView) {\n          const isBackDirection = ti.opts.direction === 'back';\n          /**\n           * If heading back, use the entering page's animation\n           * unless otherwise specified by the developer.\n           */\n          if (isBackDirection) {\n            ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n          }\n          leavingView.animationBuilder = ti.opts.animationBuilder;\n        }\n        let result;\n        if (requiresTransition) {\n          result = yield _this9.transition(enteringView, leavingView, ti);\n        } else {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          result = {\n            hasCompleted: true,\n            requiresTransition: false\n          };\n        }\n        _this9.success(result, ti);\n        _this9.ionNavDidChange.emit();\n      } catch (rejectReason) {\n        _this9.failed(rejectReason, ti);\n      }\n      _this9.isTransitioning = false;\n      _this9.nextTrns();\n    })();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const {\n      insertViews,\n      removeStart,\n      removeCount\n    } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  transition(enteringView, leavingView, ti) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      // we should animate (duration > 0) if the pushed page is not the first one (startup)\n      // or if it is a portal (modal, actionsheet, etc.)\n      const opts = ti.opts;\n      const progressCallback = opts.progressAnimation ? ani => _this10.sbAni = ani : undefined;\n      const mode = getIonMode(_this10);\n      const enteringEl = enteringView.element;\n      const leavingEl = leavingView && leavingView.element;\n      const animationOpts = Object.assign(Object.assign({\n        mode,\n        showGoBack: _this10.canGoBackSync(enteringView),\n        baseEl: _this10.el,\n        progressCallback,\n        animated: _this10.animated && config.getBoolean('animated', true),\n        enteringEl,\n        leavingEl\n      }, opts), {\n        animationBuilder: opts.animationBuilder || _this10.animation || config.get('navAnimation')\n      });\n      const {\n        hasCompleted\n      } = yield transition(animationOpts);\n      return _this10.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    })();\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    } else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  }\n  onStart() {\n    this.pop({\n      direction: 'back',\n      progressAnimation: true\n    });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n};\nNav.style = navCss;\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n  return Promise.resolve(false);\n};\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return h(Host, {\n      onClick: this.onClick\n    });\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"names":["r","registerInstance","e","createEvent","h","i","getElement","H","Host","b","getIonMode","c","config","g","getTimeGivenProgression","n","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","hostRef","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","destroy","length","push","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","Object","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","_c","viewsLength","viewControllers","removeEnd","destroyQueue","finalNumViews","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","watchers","style","navLink","routerDirection","routerAnimation","NavLink","onClick","ion_nav","ion_nav_link"],"sources":["C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-8e692445.js';\nimport { b as getIonMode, c as config } from './ionic-global-c95cf239.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-e78d1307.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers-3b390e48.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-eab49c64.js';\nimport { a as attachComponent } from './framework-delegate-073a0b65.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-e1ef2243.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return h(Host, { onClick: this.onClick });\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}