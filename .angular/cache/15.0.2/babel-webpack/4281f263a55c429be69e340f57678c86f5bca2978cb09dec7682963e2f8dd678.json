{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-8e692445.js';\nimport { l as chevronDown } from './index-da396832.js';\nimport { c as config, b as getIonMode } from './ionic-global-c95cf239.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-3b390e48.js';\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nconst Accordion = class {\n  constructor(hostRef) {\n    var _this = this;\n    registerInstance(this, hostRef);\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const {\n        headerEl\n      } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined) return;\n      return slot.assignedElements().find(el => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const {\n        toggleIconSlot,\n        toggleIcon\n      } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const {\n        contentEl,\n        contentElWrapper\n      } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator(function* () {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            yield waitForTransition;\n            _this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          }));\n        });\n      } else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n\n    this.collapseAccordion = (initialUpdate = false) => {\n      const {\n        contentEl\n      } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator(function* () {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf( /*#__PURE__*/_asyncToGenerator(function* () {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            _this.state = 2 /* AccordionState.Collapsing */;\n            yield waitForTransition;\n            _this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          }));\n        }));\n      } else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = /*#__PURE__*/_asyncToGenerator(function* (initialUpdate = false) {\n      const accordionGroup = _this.accordionGroupEl;\n      const accordionValue = _this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        _this.expandAccordion(initialUpdate);\n        _this.isNext = _this.isPrevious = false;\n      } else {\n        _this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = _this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = _this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    });\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const {\n      accordionGroupEl,\n      value,\n      state\n    } = this;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const {\n      disabled,\n      readonly\n    } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true)\n      }\n    }, h(\"div\", {\n      onClick: () => this.toggleExpanded(),\n      id: \"header\",\n      part: headerPart,\n      \"aria-controls\": \"content\",\n      ref: headerEl => this.headerEl = headerEl\n    }, h(\"slot\", {\n      name: \"header\"\n    })), h(\"div\", {\n      id: \"content\",\n      part: contentPart,\n      role: \"region\",\n      \"aria-labelledby\": \"header\",\n      ref: contentEl => this.contentEl = contentEl\n    }, h(\"div\", {\n      id: \"content-wrapper\",\n      ref: contentElWrapper => this.contentElWrapper = contentElWrapper\n    }, h(\"slot\", {\n      name: \"content\"\n    }))));\n  }\n  static get delegatesFocus() {\n    return true;\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst AccordionGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n    this.expand = 'compact';\n  }\n  valueChanged() {\n    const {\n      value,\n      multiple\n    } = this;\n    /**\n     * If accordion group does not\n     * let multiple accordions be open\n     * at once, but user passes an array\n     * just grab the first value.\n     */\n    if (!multiple && Array.isArray(value)) {\n      this.value = value[0];\n    } else {\n      this.ionChange.emit({\n        value: this.value\n      });\n    }\n  }\n  disabledChanged() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        disabled\n      } = _this2;\n      const accordions = yield _this2.getAccordions();\n      for (const accordion of accordions) {\n        accordion.disabled = disabled;\n      }\n    })();\n  }\n  readonlyChanged() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        readonly\n      } = _this3;\n      const accordions = yield _this3.getAccordions();\n      for (const accordion of accordions) {\n        accordion.readonly = readonly;\n      }\n    })();\n  }\n  onKeydown(ev) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const activeElement = document.activeElement;\n      if (!activeElement) {\n        return;\n      }\n      /**\n       * Make sure focus is in the header, not the body, of the accordion. This ensures\n       * that if there are any interactable elements in the body, their keyboard\n       * interaction doesn't get stolen by the accordion. Example: using up/down keys\n       * in ion-textarea.\n       */\n      const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n      if (!activeAccordionHeader) {\n        return;\n      }\n      const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n      if (!accordionEl) {\n        return;\n      }\n      const closestGroup = accordionEl.closest('ion-accordion-group');\n      if (closestGroup !== _this4.el) {\n        return;\n      }\n      // If the active accordion is not in the current array of accordions, do not do anything\n      const accordions = yield _this4.getAccordions();\n      const startingIndex = accordions.findIndex(a => a === accordionEl);\n      if (startingIndex === -1) {\n        return;\n      }\n      let accordion;\n      if (ev.key === 'ArrowDown') {\n        accordion = _this4.findNextAccordion(accordions, startingIndex);\n      } else if (ev.key === 'ArrowUp') {\n        accordion = _this4.findPreviousAccordion(accordions, startingIndex);\n      } else if (ev.key === 'Home') {\n        accordion = accordions[0];\n      } else if (ev.key === 'End') {\n        accordion = accordions[accordions.length - 1];\n      }\n      if (accordion !== undefined && accordion !== activeElement) {\n        accordion.focus();\n      }\n    })();\n  }\n  componentDidLoad() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.disabled) {\n        _this5.disabledChanged();\n      }\n      if (_this5.readonly) {\n        _this5.readonlyChanged();\n      }\n    })();\n  }\n  /**\n   * @internal\n   */\n  requestAccordionToggle(accordionValue, accordionExpand) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        multiple,\n        value,\n        readonly,\n        disabled\n      } = _this6;\n      if (readonly || disabled) {\n        return;\n      }\n      if (accordionExpand) {\n        /**\n         * If group accepts multiple values\n         * check to see if value is already in\n         * in values array. If not, add it\n         * to the array.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          const valueExists = processedValue.find(v => v === accordionValue);\n          if (valueExists === undefined && accordionValue !== undefined) {\n            _this6.value = [...processedValue, accordionValue];\n          }\n        } else {\n          _this6.value = accordionValue;\n        }\n      } else {\n        /**\n         * If collapsing accordion, either filter the value\n         * out of the values array or unset the value.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          _this6.value = processedValue.filter(v => v !== accordionValue);\n        } else {\n          _this6.value = undefined;\n        }\n      }\n    })();\n  }\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1];\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n    return nextAccordion;\n  }\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1];\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n  getAccordions() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return Array.from(_this7.el.querySelectorAll(':scope > ion-accordion'));\n    })();\n  }\n  render() {\n    const {\n      disabled,\n      readonly,\n      expand\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true\n      },\n      role: \"presentation\"\n    }, h(\"slot\", null));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"readonly\": [\"readonlyChanged\"]\n    };\n  }\n};\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };","map":{"version":3,"names":["r","registerInstance","h","H","Host","i","getElement","e","createEvent","l","chevronDown","c","config","b","getIonMode","raf","t","transitionEndAsync","a","addEventListener","removeEventListener","g","getElementRoot","accordionIosCss","accordionMdCss","Accordion","constructor","hostRef","updateListener","updateState","state","isNext","isPrevious","value","accordionIds","disabled","readonly","toggleIcon","toggleIconSlot","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","lines","undefined","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","root","setAttribute","slotToggleIcon","existingToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","currentRaf","cancelAnimationFrame","shouldAnimate","contentHeight","offsetHeight","waitForTransition","style","setProperty","removeProperty","collapseAccordion","window","prefersReducedMotion","matchMedia","matches","animated","get","accordionGroupEl","accordionGroup","accordionValue","shouldExpand","Array","isArray","includes","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","connectedCallback","_a","closest","disconnectedCallback","componentDidLoad","toggleExpanded","expand","requestAccordionToggle","render","mode","headerPart","contentPart","class","getBoolean","onClick","id","part","ref","name","role","delegatesFocus","ios","md","accordionGroupIosCss","accordionGroupMdCss","AccordionGroup","ionChange","valueChanged","multiple","emit","disabledChanged","accordions","getAccordions","accordion","readonlyChanged","onKeydown","ev","activeElement","activeAccordionHeader","accordionEl","closestGroup","startingIndex","findIndex","key","findNextAccordion","findPreviousAccordion","length","focus","accordionExpand","groupValue","processedValue","valueExists","v","filter","prevAccordion","from","querySelectorAll","watchers","ion_accordion","ion_accordion_group"],"sources":["C:/Users/maria/Desktop/CryptoBros/CryptoBros/node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-8e692445.js';\nimport { l as chevronDown } from './index-da396832.js';\nimport { c as config, b as getIonMode } from './ionic-global-c95cf239.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-3b390e48.js';\n\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\n\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\n\nconst Accordion = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const { headerEl } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined)\n        return;\n      return slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const { toggleIconSlot, toggleIcon } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const { contentEl, contentElWrapper } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      const { contentEl } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* AccordionState.Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      }\n      else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const { accordionGroupEl, value, state } = this;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const { disabled, readonly } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true),\n      } }, h(\"div\", { onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { name: \"header\" })), h(\"div\", { id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { name: \"content\" })))));\n  }\n  static get delegatesFocus() { return true; }\n  get el() { return getElement(this); }\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\n\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\n\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n\nconst AccordionGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n    this.expand = 'compact';\n  }\n  valueChanged() {\n    const { value, multiple } = this;\n    /**\n     * If accordion group does not\n     * let multiple accordions be open\n     * at once, but user passes an array\n     * just grab the first value.\n     */\n    if (!multiple && Array.isArray(value)) {\n      this.value = value[0];\n    }\n    else {\n      this.ionChange.emit({ value: this.value });\n    }\n  }\n  async disabledChanged() {\n    const { disabled } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.disabled = disabled;\n    }\n  }\n  async readonlyChanged() {\n    const { readonly } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.readonly = readonly;\n    }\n  }\n  async onKeydown(ev) {\n    const activeElement = document.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    /**\n     * Make sure focus is in the header, not the body, of the accordion. This ensures\n     * that if there are any interactable elements in the body, their keyboard\n     * interaction doesn't get stolen by the accordion. Example: using up/down keys\n     * in ion-textarea.\n     */\n    const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n    if (!activeAccordionHeader) {\n      return;\n    }\n    const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n    if (!accordionEl) {\n      return;\n    }\n    const closestGroup = accordionEl.closest('ion-accordion-group');\n    if (closestGroup !== this.el) {\n      return;\n    }\n    // If the active accordion is not in the current array of accordions, do not do anything\n    const accordions = await this.getAccordions();\n    const startingIndex = accordions.findIndex((a) => a === accordionEl);\n    if (startingIndex === -1) {\n      return;\n    }\n    let accordion;\n    if (ev.key === 'ArrowDown') {\n      accordion = this.findNextAccordion(accordions, startingIndex);\n    }\n    else if (ev.key === 'ArrowUp') {\n      accordion = this.findPreviousAccordion(accordions, startingIndex);\n    }\n    else if (ev.key === 'Home') {\n      accordion = accordions[0];\n    }\n    else if (ev.key === 'End') {\n      accordion = accordions[accordions.length - 1];\n    }\n    if (accordion !== undefined && accordion !== activeElement) {\n      accordion.focus();\n    }\n  }\n  async componentDidLoad() {\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    if (this.readonly) {\n      this.readonlyChanged();\n    }\n  }\n  /**\n   * @internal\n   */\n  async requestAccordionToggle(accordionValue, accordionExpand) {\n    const { multiple, value, readonly, disabled } = this;\n    if (readonly || disabled) {\n      return;\n    }\n    if (accordionExpand) {\n      /**\n       * If group accepts multiple values\n       * check to see if value is already in\n       * in values array. If not, add it\n       * to the array.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        const valueExists = processedValue.find((v) => v === accordionValue);\n        if (valueExists === undefined && accordionValue !== undefined) {\n          this.value = [...processedValue, accordionValue];\n        }\n      }\n      else {\n        this.value = accordionValue;\n      }\n    }\n    else {\n      /**\n       * If collapsing accordion, either filter the value\n       * out of the values array or unset the value.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        this.value = processedValue.filter((v) => v !== accordionValue);\n      }\n      else {\n        this.value = undefined;\n      }\n    }\n  }\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1];\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n    return nextAccordion;\n  }\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1];\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n  async getAccordions() {\n    return Array.from(this.el.querySelectorAll(':scope > ion-accordion'));\n  }\n  render() {\n    const { disabled, readonly, expand } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true,\n      }, role: \"presentation\" }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"],\n    \"disabled\": [\"disabledChanged\"],\n    \"readonly\": [\"readonlyChanged\"]\n  }; }\n};\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\n\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,CAAC,IAAIC,gBAAgB,EAAEC,CAAC,EAAEC,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,UAAU,EAAEC,CAAC,IAAIC,WAAW,QAAQ,qBAAqB;AAC5G,SAASC,CAAC,IAAIC,WAAW,QAAQ,qBAAqB;AACtD,SAASC,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,UAAU,QAAQ,4BAA4B;AACzE,SAASd,CAAC,IAAIe,GAAG,EAAEC,CAAC,IAAIC,kBAAkB,EAAEC,CAAC,IAAIC,gBAAgB,EAAEN,CAAC,IAAIO,mBAAmB,EAAEC,CAAC,IAAIC,cAAc,QAAQ,uBAAuB;AAE/I,MAAMC,eAAe,GAAG,0tCAA0tC;AAElvC,MAAMC,cAAc,GAAG,6nCAA6nC;AAEppC,MAAMC,SAAS,GAAG,MAAM;EACtBC,WAAW,CAACC,OAAO,EAAE;IAAA;IACnB1B,gBAAgB,CAAC,IAAI,EAAE0B,OAAO,CAAC;IAC/B,IAAI,CAACC,cAAc,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,KAAK,CAAC;IACnD,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAI,iBAAgBC,YAAY,EAAG,EAAC;IAC9C;AACJ;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG3B,WAAW;IAC7B;AACJ;AACA;AACA;IACI,IAAI,CAAC4B,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,eAAe,GAAG,MAAM;MAC3B,MAAMC,OAAO,GAAG,IAAI,CAACC,uBAAuB,EAAE;MAC9C,IAAI,CAACD,OAAO,EAAE;QACZ;MACF;MACA;AACN;AACA;AACA;AACA;AACA;MACMA,OAAO,CAACE,MAAM,GAAG,IAAI;MACrBF,OAAO,CAACG,MAAM,GAAG,KAAK;MACtB;AACN;AACA;AACA;AACA;AACA;MACM,IAAIH,OAAO,CAACI,KAAK,KAAKC,SAAS,EAAE;QAC/BL,OAAO,CAACI,KAAK,GAAG,MAAM;MACxB;IACF,CAAC;IACD,IAAI,CAACH,uBAAuB,GAAG,MAAM;MACnC,MAAM;QAAEK;MAAS,CAAC,GAAG,IAAI;MACzB,IAAI,CAACA,QAAQ,EAAE;QACb;MACF;MACA;AACN;AACA;AACA;MACM,MAAMC,IAAI,GAAGD,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MAC3C,IAAI,CAACD,IAAI,EAAE;QACT;MACF;MACA;MACA,IAAIA,IAAI,CAACE,gBAAgB,KAAKJ,SAAS,EACrC;MACF,OAAOE,IAAI,CAACE,gBAAgB,EAAE,CAACC,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,OAAO,KAAK,UAAU,CAAC;IACxE,CAAC;IACD,IAAI,CAACC,OAAO,GAAG,CAACC,QAAQ,GAAG,KAAK,KAAK;MACnC,MAAMd,OAAO,GAAG,IAAI,CAACC,uBAAuB,EAAE;MAC9C,IAAI,CAACD,OAAO,EAAE;QACZ;MACF;MACA;AACN;AACA;AACA;MACM,MAAMe,IAAI,GAAGjC,cAAc,CAACkB,OAAO,CAAC;MACpC,MAAME,MAAM,GAAGa,IAAI,CAACP,aAAa,CAAC,QAAQ,CAAC;MAC3C,IAAI,CAACN,MAAM,EAAE;QACX;MACF;MACAA,MAAM,CAACc,YAAY,CAAC,eAAe,EAAG,GAAEF,QAAS,EAAC,CAAC;IACrD,CAAC;IACD,IAAI,CAACG,cAAc,GAAG,MAAM;MAC1B,MAAMjB,OAAO,GAAG,IAAI,CAACC,uBAAuB,EAAE;MAC9C,IAAI,CAACD,OAAO,EAAE;QACZ;MACF;MACA,MAAM;QAAEF,cAAc;QAAED;MAAW,CAAC,GAAG,IAAI;MAC3C;AACN;AACA;AACA;MACM,MAAMqB,kBAAkB,GAAGlB,OAAO,CAACQ,aAAa,CAAC,4BAA4B,CAAC;MAC9E,IAAIU,kBAAkB,EAAE;QACtB;MACF;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;MACjDF,MAAM,CAACZ,IAAI,GAAGT,cAAc;MAC5BqB,MAAM,CAACG,IAAI,GAAG,KAAK;MACnBH,MAAM,CAACI,SAAS,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACjDL,MAAM,CAACM,IAAI,GAAG5B,UAAU;MACxBsB,MAAM,CAACH,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;MAC1ChB,OAAO,CAAC0B,WAAW,CAACP,MAAM,CAAC;IAC7B,CAAC;IACD,IAAI,CAACQ,eAAe,GAAG,CAACC,aAAa,GAAG,KAAK,KAAK;MAChD,MAAM;QAAEC,SAAS;QAAEC;MAAiB,CAAC,GAAG,IAAI;MAC5C,IAAIF,aAAa,IAAIC,SAAS,KAAKxB,SAAS,IAAIyB,gBAAgB,KAAKzB,SAAS,EAAE;QAC9E,IAAI,CAACf,KAAK,GAAG,CAAC,CAAC;QACf;MACF;MACA,IAAI,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC,+BAA+B;QAClD;MACF;MACA,IAAI,IAAI,CAACyC,UAAU,KAAK1B,SAAS,EAAE;QACjC2B,oBAAoB,CAAC,IAAI,CAACD,UAAU,CAAC;MACvC;MACA,IAAI,IAAI,CAACE,aAAa,EAAE,EAAE;QACxB1D,GAAG,CAAC,MAAM;UACR,IAAI,CAACe,KAAK,GAAG,CAAC,CAAC;UACf,IAAI,CAACyC,UAAU,GAAGxD,GAAG,iCAAC,aAAY;YAChC,MAAM2D,aAAa,GAAGJ,gBAAgB,CAACK,YAAY;YACnD,MAAMC,iBAAiB,GAAG3D,kBAAkB,CAACoD,SAAS,EAAE,IAAI,CAAC;YAC7DA,SAAS,CAACQ,KAAK,CAACC,WAAW,CAAC,YAAY,EAAG,GAAEJ,aAAc,IAAG,CAAC;YAC/D,MAAME,iBAAiB;YACvB,KAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;YACfuC,SAAS,CAACQ,KAAK,CAACE,cAAc,CAAC,YAAY,CAAC;UAC9C,CAAC,EAAC;QACJ,CAAC,CAAC;MACJ,CAAC,MACI;QACH,IAAI,CAACjD,KAAK,GAAG,CAAC,CAAC;MACjB;IACF,CAAC;;IACD,IAAI,CAACkD,iBAAiB,GAAG,CAACZ,aAAa,GAAG,KAAK,KAAK;MAClD,MAAM;QAAEC;MAAU,CAAC,GAAG,IAAI;MAC1B,IAAID,aAAa,IAAIC,SAAS,KAAKxB,SAAS,EAAE;QAC5C,IAAI,CAACf,KAAK,GAAG,CAAC,CAAC;QACf;MACF;MACA,IAAI,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC,gCAAgC;QACnD;MACF;MACA,IAAI,IAAI,CAACyC,UAAU,KAAK1B,SAAS,EAAE;QACjC2B,oBAAoB,CAAC,IAAI,CAACD,UAAU,CAAC;MACvC;MACA,IAAI,IAAI,CAACE,aAAa,EAAE,EAAE;QACxB,IAAI,CAACF,UAAU,GAAGxD,GAAG,iCAAC,aAAY;UAChC,MAAM2D,aAAa,GAAGL,SAAS,CAACM,YAAY;UAC5CN,SAAS,CAACQ,KAAK,CAACC,WAAW,CAAC,YAAY,EAAG,GAAEJ,aAAc,IAAG,CAAC;UAC/D3D,GAAG,iCAAC,aAAY;YACd,MAAM6D,iBAAiB,GAAG3D,kBAAkB,CAACoD,SAAS,EAAE,IAAI,CAAC;YAC7D,KAAI,CAACvC,KAAK,GAAG,CAAC,CAAC;YACf,MAAM8C,iBAAiB;YACvB,KAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;YACfuC,SAAS,CAACQ,KAAK,CAACE,cAAc,CAAC,YAAY,CAAC;UAC9C,CAAC,EAAC;QACJ,CAAC,EAAC;MACJ,CAAC,MACI;QACH,IAAI,CAACjD,KAAK,GAAG,CAAC,CAAC;MACjB;IACF,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC2C,aAAa,GAAG,MAAM;MACzB,IAAI,OAAOQ,MAAM,KAAK,WAAW,EAAE;QACjC,OAAO,KAAK;MACd;MACA,MAAMC,oBAAoB,GAAGC,UAAU,CAAC,kCAAkC,CAAC,CAACC,OAAO;MACnF,IAAIF,oBAAoB,EAAE;QACxB,OAAO,KAAK;MACd;MACA,MAAMG,QAAQ,GAAGzE,MAAM,CAAC0E,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;MAC7C,IAAI,CAACD,QAAQ,EAAE;QACb,OAAO,KAAK;MACd;MACA,IAAI,IAAI,CAACE,gBAAgB,IAAI,CAAC,IAAI,CAACA,gBAAgB,CAACF,QAAQ,EAAE;QAC5D,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC;IACD,IAAI,CAACxD,WAAW,kCAAG,WAAOuC,aAAa,GAAG,KAAK,EAAK;MAClD,MAAMoB,cAAc,GAAG,KAAI,CAACD,gBAAgB;MAC5C,MAAME,cAAc,GAAG,KAAI,CAACxD,KAAK;MACjC,IAAI,CAACuD,cAAc,EAAE;QACnB;MACF;MACA,MAAMvD,KAAK,GAAGuD,cAAc,CAACvD,KAAK;MAClC,MAAMyD,YAAY,GAAGC,KAAK,CAACC,OAAO,CAAC3D,KAAK,CAAC,GAAGA,KAAK,CAAC4D,QAAQ,CAACJ,cAAc,CAAC,GAAGxD,KAAK,KAAKwD,cAAc;MACrG,IAAIC,YAAY,EAAE;QAChB,KAAI,CAACvB,eAAe,CAACC,aAAa,CAAC;QACnC,KAAI,CAACrC,MAAM,GAAG,KAAI,CAACC,UAAU,GAAG,KAAK;MACvC,CAAC,MACI;QACH,KAAI,CAACgD,iBAAiB,CAACZ,aAAa,CAAC;QACrC;AACR;AACA;AACA;AACA;AACA;AACA;QACQ,MAAM0B,aAAa,GAAG,KAAI,CAACC,cAAc,EAAE;QAC3C,MAAMC,kBAAkB,GAAGF,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAC7D,KAAK;QAC5G,IAAI+D,kBAAkB,KAAKnD,SAAS,EAAE;UACpC,KAAI,CAACb,UAAU,GAAG2D,KAAK,CAACC,OAAO,CAAC3D,KAAK,CAAC,GAAGA,KAAK,CAAC4D,QAAQ,CAACG,kBAAkB,CAAC,GAAG/D,KAAK,KAAK+D,kBAAkB;QAC5G;QACA,MAAMC,iBAAiB,GAAG,KAAI,CAACC,kBAAkB,EAAE;QACnD,MAAMC,sBAAsB,GAAGF,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAChE,KAAK;QAC5H,IAAIkE,sBAAsB,KAAKtD,SAAS,EAAE;UACxC,KAAI,CAACd,MAAM,GAAG4D,KAAK,CAACC,OAAO,CAAC3D,KAAK,CAAC,GAAGA,KAAK,CAAC4D,QAAQ,CAACM,sBAAsB,CAAC,GAAGlE,KAAK,KAAKkE,sBAAsB;QAChH;MACF;IACF,CAAC;IACD,IAAI,CAACJ,cAAc,GAAG,MAAM;MAC1B,IAAI,CAAC,IAAI,CAAC5C,EAAE,EAAE;QACZ;MACF;MACA,MAAMiD,WAAW,GAAG,IAAI,CAACjD,EAAE,CAACkD,kBAAkB;MAC9C,IAAI,CAACD,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAAChD,OAAO,MAAM,eAAe,EAAE;QACvG;MACF;MACA,OAAOgD,WAAW;IACpB,CAAC;IACD,IAAI,CAACF,kBAAkB,GAAG,MAAM;MAC9B,IAAI,CAAC,IAAI,CAAC/C,EAAE,EAAE;QACZ;MACF;MACA,MAAMmD,eAAe,GAAG,IAAI,CAACnD,EAAE,CAACoD,sBAAsB;MACtD,IAAI,CAACD,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAAClD,OAAO,MAAM,eAAe,EAAE;QACnH;MACF;MACA,OAAOkD,eAAe;IACxB,CAAC;EACH;EACAE,iBAAiB,GAAG;IAClB,IAAIC,EAAE;IACN,MAAMlB,gBAAgB,GAAI,IAAI,CAACA,gBAAgB,GAAG,CAACkB,EAAE,GAAG,IAAI,CAACtD,EAAE,MAAM,IAAI,IAAIsD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,OAAO,CAAC,qBAAqB,CAAE;IACxI,IAAInB,gBAAgB,EAAE;MACpB,IAAI,CAAC1D,WAAW,CAAC,IAAI,CAAC;MACtBV,gBAAgB,CAACoE,gBAAgB,EAAE,WAAW,EAAE,IAAI,CAAC3D,cAAc,CAAC;IACtE;EACF;EACA+E,oBAAoB,GAAG;IACrB,MAAMpB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAC9C,IAAIA,gBAAgB,EAAE;MACpBnE,mBAAmB,CAACmE,gBAAgB,EAAE,WAAW,EAAE,IAAI,CAAC3D,cAAc,CAAC;IACzE;EACF;EACAgF,gBAAgB,GAAG;IACjB,IAAI,CAACrE,eAAe,EAAE;IACtB,IAAI,CAACkB,cAAc,EAAE;IACrB;AACJ;AACA;AACA;AACA;IACI1C,GAAG,CAAC,MAAM;MACR;AACN;AACA;AACA;MACM,MAAMuC,QAAQ,GAAG,IAAI,CAACxB,KAAK,KAAK,CAAC,CAAC,iCAAiC,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC;MACpF,IAAI,CAACuB,OAAO,CAACC,QAAQ,CAAC;IACxB,CAAC,CAAC;EACJ;EACAuD,cAAc,GAAG;IACf,MAAM;MAAEtB,gBAAgB;MAAEtD,KAAK;MAAEH;IAAM,CAAC,GAAG,IAAI;IAC/C,IAAIyD,gBAAgB,EAAE;MACpB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACM,MAAMuB,MAAM,GAAGhF,KAAK,KAAK,CAAC,CAAC,kCAAkCA,KAAK,KAAK,CAAC,CAAC;MACzEyD,gBAAgB,CAACwB,sBAAsB,CAAC9E,KAAK,EAAE6E,MAAM,CAAC;IACxD;EACF;EACAE,MAAM,GAAG;IACP,MAAM;MAAE7E,QAAQ;MAAEC;IAAS,CAAC,GAAG,IAAI;IACnC,MAAM6E,IAAI,GAAGnG,UAAU,CAAC,IAAI,CAAC;IAC7B,MAAMwC,QAAQ,GAAG,IAAI,CAACxB,KAAK,KAAK,CAAC,CAAC,iCAAiC,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC;IACpF,MAAMoF,UAAU,GAAG5D,QAAQ,GAAG,iBAAiB,GAAG,QAAQ;IAC1D,MAAM6D,WAAW,GAAG7D,QAAQ,GAAG,kBAAkB,GAAG,SAAS;IAC7D,IAAI,CAACD,OAAO,CAACC,QAAQ,CAAC;IACtB,OAAQpD,CAAC,CAACE,IAAI,EAAE;MAAEgH,KAAK,EAAE;QACrB,CAACH,IAAI,GAAG,IAAI;QACZ,qBAAqB,EAAE,IAAI,CAACnF,KAAK,KAAK,CAAC,CAAC;QACxC,oBAAoB,EAAE,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC;QACvC,sBAAsB,EAAE,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC;QACzC,qBAAqB,EAAE,IAAI,CAACA,KAAK,KAAK,CAAC,CAAC;QACxC,gBAAgB,EAAE,IAAI,CAACC,MAAM;QAC7B,oBAAoB,EAAE,IAAI,CAACC,UAAU;QACrC,oBAAoB,EAAEG,QAAQ;QAC9B,oBAAoB,EAAEC,QAAQ;QAC9B,oBAAoB,EAAExB,MAAM,CAACyG,UAAU,CAAC,UAAU,EAAE,IAAI;MAC1D;IAAE,CAAC,EAAEnH,CAAC,CAAC,KAAK,EAAE;MAAEoH,OAAO,EAAE,MAAM,IAAI,CAACT,cAAc,EAAE;MAAEU,EAAE,EAAE,QAAQ;MAAEC,IAAI,EAAEN,UAAU;MAAE,eAAe,EAAE,SAAS;MAAEO,GAAG,EAAG3E,QAAQ,IAAM,IAAI,CAACA,QAAQ,GAAGA;IAAU,CAAC,EAAE5C,CAAC,CAAC,MAAM,EAAE;MAAEwH,IAAI,EAAE;IAAS,CAAC,CAAC,CAAC,EAAExH,CAAC,CAAC,KAAK,EAAE;MAAEqH,EAAE,EAAE,SAAS;MAAEC,IAAI,EAAEL,WAAW;MAAEQ,IAAI,EAAE,QAAQ;MAAE,iBAAiB,EAAE,QAAQ;MAAEF,GAAG,EAAGpD,SAAS,IAAM,IAAI,CAACA,SAAS,GAAGA;IAAW,CAAC,EAAEnE,CAAC,CAAC,KAAK,EAAE;MAAEqH,EAAE,EAAE,iBAAiB;MAAEE,GAAG,EAAGnD,gBAAgB,IAAM,IAAI,CAACA,gBAAgB,GAAGA;IAAkB,CAAC,EAAEpE,CAAC,CAAC,MAAM,EAAE;MAAEwH,IAAI,EAAE;IAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EACje;EACA,WAAWE,cAAc,GAAG;IAAE,OAAO,IAAI;EAAE;EAC3C,IAAIzE,EAAE,GAAG;IAAE,OAAO7C,UAAU,CAAC,IAAI,CAAC;EAAE;AACtC,CAAC;AACD,IAAI4B,YAAY,GAAG,CAAC;AACpBT,SAAS,CAACoD,KAAK,GAAG;EAChBgD,GAAG,EAAEtG,eAAe;EACpBuG,EAAE,EAAEtG;AACN,CAAC;AAED,MAAMuG,oBAAoB,GAAG,mkBAAmkB;AAEhmB,MAAMC,mBAAmB,GAAG,o1DAAo1D;AAEh3D,MAAMC,cAAc,GAAG,MAAM;EAC3BvG,WAAW,CAACC,OAAO,EAAE;IACnB1B,gBAAgB,CAAC,IAAI,EAAE0B,OAAO,CAAC;IAC/B,IAAI,CAACuG,SAAS,GAAG1H,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IAClD;AACJ;AACA;AACA;AACA;IACI,IAAI,CAAC6E,QAAQ,GAAG,IAAI;IACpB;AACJ;AACA;IACI,IAAI,CAAClD,QAAQ,GAAG,KAAK;IACrB;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAAC0E,MAAM,GAAG,SAAS;EACzB;EACAqB,YAAY,GAAG;IACb,MAAM;MAAElG,KAAK;MAAEmG;IAAS,CAAC,GAAG,IAAI;IAChC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACA,QAAQ,IAAIzC,KAAK,CAACC,OAAO,CAAC3D,KAAK,CAAC,EAAE;MACrC,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,MACI;MACH,IAAI,CAACiG,SAAS,CAACG,IAAI,CAAC;QAAEpG,KAAK,EAAE,IAAI,CAACA;MAAM,CAAC,CAAC;IAC5C;EACF;EACMqG,eAAe,GAAG;IAAA;IAAA;MACtB,MAAM;QAAEnG;MAAS,CAAC,GAAG,MAAI;MACzB,MAAMoG,UAAU,SAAS,MAAI,CAACC,aAAa,EAAE;MAC7C,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;QAClCE,SAAS,CAACtG,QAAQ,GAAGA,QAAQ;MAC/B;IAAC;EACH;EACMuG,eAAe,GAAG;IAAA;IAAA;MACtB,MAAM;QAAEtG;MAAS,CAAC,GAAG,MAAI;MACzB,MAAMmG,UAAU,SAAS,MAAI,CAACC,aAAa,EAAE;MAC7C,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;QAClCE,SAAS,CAACrG,QAAQ,GAAGA,QAAQ;MAC/B;IAAC;EACH;EACMuG,SAAS,CAACC,EAAE,EAAE;IAAA;IAAA;MAClB,MAAMC,aAAa,GAAGjF,QAAQ,CAACiF,aAAa;MAC5C,IAAI,CAACA,aAAa,EAAE;QAClB;MACF;MACA;AACJ;AACA;AACA;AACA;AACA;MACI,MAAMC,qBAAqB,GAAGD,aAAa,CAACnC,OAAO,CAAC,+BAA+B,CAAC;MACpF,IAAI,CAACoC,qBAAqB,EAAE;QAC1B;MACF;MACA,MAAMC,WAAW,GAAGF,aAAa,CAACzF,OAAO,KAAK,eAAe,GAAGyF,aAAa,GAAGA,aAAa,CAACnC,OAAO,CAAC,eAAe,CAAC;MACtH,IAAI,CAACqC,WAAW,EAAE;QAChB;MACF;MACA,MAAMC,YAAY,GAAGD,WAAW,CAACrC,OAAO,CAAC,qBAAqB,CAAC;MAC/D,IAAIsC,YAAY,KAAK,MAAI,CAAC7F,EAAE,EAAE;QAC5B;MACF;MACA;MACA,MAAMoF,UAAU,SAAS,MAAI,CAACC,aAAa,EAAE;MAC7C,MAAMS,aAAa,GAAGV,UAAU,CAACW,SAAS,CAAEhI,CAAC,IAAKA,CAAC,KAAK6H,WAAW,CAAC;MACpE,IAAIE,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB;MACF;MACA,IAAIR,SAAS;MACb,IAAIG,EAAE,CAACO,GAAG,KAAK,WAAW,EAAE;QAC1BV,SAAS,GAAG,MAAI,CAACW,iBAAiB,CAACb,UAAU,EAAEU,aAAa,CAAC;MAC/D,CAAC,MACI,IAAIL,EAAE,CAACO,GAAG,KAAK,SAAS,EAAE;QAC7BV,SAAS,GAAG,MAAI,CAACY,qBAAqB,CAACd,UAAU,EAAEU,aAAa,CAAC;MACnE,CAAC,MACI,IAAIL,EAAE,CAACO,GAAG,KAAK,MAAM,EAAE;QAC1BV,SAAS,GAAGF,UAAU,CAAC,CAAC,CAAC;MAC3B,CAAC,MACI,IAAIK,EAAE,CAACO,GAAG,KAAK,KAAK,EAAE;QACzBV,SAAS,GAAGF,UAAU,CAACA,UAAU,CAACe,MAAM,GAAG,CAAC,CAAC;MAC/C;MACA,IAAIb,SAAS,KAAK5F,SAAS,IAAI4F,SAAS,KAAKI,aAAa,EAAE;QAC1DJ,SAAS,CAACc,KAAK,EAAE;MACnB;IAAC;EACH;EACM3C,gBAAgB,GAAG;IAAA;IAAA;MACvB,IAAI,MAAI,CAACzE,QAAQ,EAAE;QACjB,MAAI,CAACmG,eAAe,EAAE;MACxB;MACA,IAAI,MAAI,CAAClG,QAAQ,EAAE;QACjB,MAAI,CAACsG,eAAe,EAAE;MACxB;IAAC;EACH;EACA;AACF;AACA;EACQ3B,sBAAsB,CAACtB,cAAc,EAAE+D,eAAe,EAAE;IAAA;IAAA;MAC5D,MAAM;QAAEpB,QAAQ;QAAEnG,KAAK;QAAEG,QAAQ;QAAED;MAAS,CAAC,GAAG,MAAI;MACpD,IAAIC,QAAQ,IAAID,QAAQ,EAAE;QACxB;MACF;MACA,IAAIqH,eAAe,EAAE;QACnB;AACN;AACA;AACA;AACA;AACA;QACM,IAAIpB,QAAQ,EAAE;UACZ,MAAMqB,UAAU,GAAGxH,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;UAClE,MAAMyH,cAAc,GAAG/D,KAAK,CAACC,OAAO,CAAC6D,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;UAC5E,MAAME,WAAW,GAAGD,cAAc,CAACxG,IAAI,CAAE0G,CAAC,IAAKA,CAAC,KAAKnE,cAAc,CAAC;UACpE,IAAIkE,WAAW,KAAK9G,SAAS,IAAI4C,cAAc,KAAK5C,SAAS,EAAE;YAC7D,MAAI,CAACZ,KAAK,GAAG,CAAC,GAAGyH,cAAc,EAAEjE,cAAc,CAAC;UAClD;QACF,CAAC,MACI;UACH,MAAI,CAACxD,KAAK,GAAGwD,cAAc;QAC7B;MACF,CAAC,MACI;QACH;AACN;AACA;AACA;QACM,IAAI2C,QAAQ,EAAE;UACZ,MAAMqB,UAAU,GAAGxH,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;UAClE,MAAMyH,cAAc,GAAG/D,KAAK,CAACC,OAAO,CAAC6D,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;UAC5E,MAAI,CAACxH,KAAK,GAAGyH,cAAc,CAACG,MAAM,CAAED,CAAC,IAAKA,CAAC,KAAKnE,cAAc,CAAC;QACjE,CAAC,MACI;UACH,MAAI,CAACxD,KAAK,GAAGY,SAAS;QACxB;MACF;IAAC;EACH;EACAuG,iBAAiB,CAACb,UAAU,EAAEU,aAAa,EAAE;IAC3C,MAAMnD,aAAa,GAAGyC,UAAU,CAACU,aAAa,GAAG,CAAC,CAAC;IACnD,IAAInD,aAAa,KAAKjD,SAAS,EAAE;MAC/B,OAAO0F,UAAU,CAAC,CAAC,CAAC;IACtB;IACA,OAAOzC,aAAa;EACtB;EACAuD,qBAAqB,CAACd,UAAU,EAAEU,aAAa,EAAE;IAC/C,MAAMa,aAAa,GAAGvB,UAAU,CAACU,aAAa,GAAG,CAAC,CAAC;IACnD,IAAIa,aAAa,KAAKjH,SAAS,EAAE;MAC/B,OAAO0F,UAAU,CAACA,UAAU,CAACe,MAAM,GAAG,CAAC,CAAC;IAC1C;IACA,OAAOQ,aAAa;EACtB;EACA;AACF;AACA;EACQtB,aAAa,GAAG;IAAA;IAAA;MACpB,OAAO7C,KAAK,CAACoE,IAAI,CAAC,MAAI,CAAC5G,EAAE,CAAC6G,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;IAAC;EACxE;EACAhD,MAAM,GAAG;IACP,MAAM;MAAE7E,QAAQ;MAAEC,QAAQ;MAAE0E;IAAO,CAAC,GAAG,IAAI;IAC3C,MAAMG,IAAI,GAAGnG,UAAU,CAAC,IAAI,CAAC;IAC7B,OAAQZ,CAAC,CAACE,IAAI,EAAE;MAAEgH,KAAK,EAAE;QACrB,CAACH,IAAI,GAAG,IAAI;QACZ,0BAA0B,EAAE9E,QAAQ;QACpC,0BAA0B,EAAEC,QAAQ;QACpC,CAAE,0BAAyB0E,MAAO,EAAC,GAAG;MACxC,CAAC;MAAEa,IAAI,EAAE;IAAe,CAAC,EAAEzH,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;EAC/C;EACA,IAAIiD,EAAE,GAAG;IAAE,OAAO7C,UAAU,CAAC,IAAI,CAAC;EAAE;EACpC,WAAW2J,QAAQ,GAAG;IAAE,OAAO;MAC7B,OAAO,EAAE,CAAC,cAAc,CAAC;MACzB,UAAU,EAAE,CAAC,iBAAiB,CAAC;MAC/B,UAAU,EAAE,CAAC,iBAAiB;IAChC,CAAC;EAAE;AACL,CAAC;AACDhC,cAAc,CAACpD,KAAK,GAAG;EACrBgD,GAAG,EAAEE,oBAAoB;EACzBD,EAAE,EAAEE;AACN,CAAC;AAED,SAASvG,SAAS,IAAIyI,aAAa,EAAEjC,cAAc,IAAIkC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}